---
- name: Cross-platform Development Tools Installation
  hosts: localhost
  connection: local
  gather_facts: yes
  become: yes

  # TODO: add bat, eza

  vars:
    debian_packages:
      - stow
      - ripgrep
      - fd-find
      - neovim
      - python3
      - zoxide
      - tldr
      - atuin
      - zsh
      - tmux
      - coreutils
      - lua5.3
      - tlp
      - build-essential
      - fzf
      - yq
    arch_packages:
      - stow
      - ripgrep
      - fd
      - neovim
      - python
      - zoxide
      - tldr
      - atuin
      - zsh
      - tmux
      - coreutils
      - lua
      # - tlp
      # - tlpui
      - base-devel
      - fzf
      - rustup
      - unzip
      - bat
      - eza
      - yq
      - pipx
    fedora_packages:
      - stow
      - ripgrep
      - fd-find
      - neovim
      - python3
      - zoxide
      - tldr
      - atuin
      - zsh
      - tmux
      - coreutils
      - lua
      - tlp
      - tlp-rdw
      - '@development-tools'
      - fzf
      - yq
      - pipx
    macos_packages:
      - stow
      - ripgrep
      - fd
      - neovim
      - python
      - zoxide
      - tldr
      - atuin
      - zsh
      - tmux
      - coreutils
      - lua
      - fzf
      - yq
    termux_packages:
      - stow
      - ripgrep
      - fd
      - neovim
      - python
      - zoxide
      - tldr
      - atuin
      - zsh
      - tmux
      - coreutils
      - lua
      - fzf
      - yq
  tasks:
    - name: Ensure community.general collection is installed
      ansible.builtin.command:
        cmd: ansible-galaxy collection install community.general
      changed_when: false
      check_mode: no

    # ubuntu
    - name: Install packages on Debian/Ubuntu
      ansible.builtin.apt:
        name: "{{ debian_packages }}"
        state: present
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"

    # arch
    - name: Check if yay is already installed
      ansible.builtin.command: which yay
      register: yay_installed
      failed_when: false
      changed_when: false
      when: ansible_facts['os_family'] == "Archlinux"

    - name: Install yay on Arch Linux
      ansible.builtin.shell: |
        sudo pacman -S --needed --noconfirm git base-devel && \
        git clone https://aur.archlinux.org/yay-bin.git /tmp/yay-bin && \
        cd /tmp/yay-bin && \
        makepkg -si --noconfirm
      become: no
      when: ansible_facts['os_family'] == "Archlinux" and yay_installed.rc != 0

    - name: Install packages on Arch Linux using aur module
      community.general.aur:
        name: "{{ arch_packages }}"
        state: present
        update_cache: yes
        use_yay: yes
      when: ansible_facts['os_family'] == "Archlinux"

    # fedora
    - name: Install packages on Fedora
      ansible.builtin.dnf:
        name: "{{ fedora_packages }}"
        state: present
        update_cache: yes
      when: ansible_facts['os_family'] == "RedHat"

    # macos
    - name: Install packages on macOS
      community.general.homebrew:
        name: "{{ macos_packages }}"
        state: present
        update_homebrew: yes
      when: ansible_facts['os_family'] == "Darwin"

    - name: Install Xcode Command Line Tools on macOS
      ansible.builtin.command: xcode-select --install
      args:
        creates: /Library/Developer/CommandLineTools
      when: ansible_facts['os_family'] == "Darwin"

    # termux
    - name: Install packages on Termux
      ansible.builtin.apt:
        name: "{{ termux_packages }}"
        state: present
        update_cache: yes
      when: ansible_facts['distribution'] == "Termux"


    # general tools
    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: auto

    - name: Install gnome-extensions-cli using pipx
      community.general.pipx:
        name: gnome-extensions-cli
        state: present
        system_site_packages: true
      become: no

    # - name: Install Rust using rustup
    #   ansible.builtin.shell: |
    #     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    #   args:
    #     creates: "{{ ansible_env.HOME }}/.cargo/bin/rustc"
    #   when: ansible_facts['os_family'] in ["Debian", "Archlinux", "RedHat", "Darwin"] or ansible_facts['distribution'] == "Termux"

    # - name: Ensure cargo is in PATH
    #   ansible.builtin.shell: |
    #     echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc
    #   args:
    #     executable: /bin/bash
    #   when: ansible_facts['os_family'] != "Darwin"

    # - name: Install cargo packages
    #   community.general.cargo:
    #     name:
    #       - cargo
    #   when: ansible_facts['os_family'] in ["Debian", "Archlinux", "RedHat", "Darwin"] or ansible_facts['distribution'] == "Termux"
